{{- $name := include "kubeadmiral.name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}-apiserver
  namespace: {{ include "kubeadmiral.namespace" . }}
  labels:
    app: {{ $name }}-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $name }}-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ $name }}-apiserver
    spec:
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - {{ $name }}-apiserver
              topologyKey: kubernetes.io/hostname
      containers:
        - command:
            - kube-apiserver
            - --allow-privileged=true
            - --authorization-mode=Node,RBAC
            - --client-ca-file=/etc/kubeadmiral/pki/ca.crt
            - --enable-admission-plugins=NodeRestriction
            - --enable-bootstrap-token-auth=true
            - --enable-aggregator-routing=false # make sure ExternalName svc can work for HPA aggregator
            - --etcd-cafile=/etc/kubeadmiral/pki/etcd-ca.crt
            - --etcd-certfile=/etc/kubeadmiral/pki/etcd-client.crt
            - --etcd-keyfile=/etc/kubeadmiral/pki/etcd-client.key
            - --etcd-servers=https://etcd-client.{{ include "kubeadmiral.namespace" . }}.svc.{{ .Values.clusterDomain }}:2379
            - --bind-address=0.0.0.0
            - --kubelet-client-certificate=/etc/kubeadmiral/pki/kubeadmiral.crt
            - --kubelet-client-key=/etc/kubeadmiral/pki/kubeadmiral.key
            - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
            - --disable-admission-plugins=StorageObjectInUseProtection,ServiceAccount
            - --runtime-config=
            - --secure-port=5443
            - --service-account-issuer=https://kubernetes.default.svc.{{ .Values.clusterDomain }}
            - --service-account-key-file=/etc/kubeadmiral/pki/kubeadmiral.key
            - --service-account-signing-key-file=/etc/kubeadmiral/pki/kubeadmiral.key
            - --service-cluster-ip-range=10.96.0.0/12
            - --proxy-client-cert-file=/etc/kubeadmiral/pki/front-proxy-client.crt
            - --proxy-client-key-file=/etc/kubeadmiral/pki/front-proxy-client.key
            - --requestheader-allowed-names=front-proxy-client
            - --requestheader-client-ca-file=/etc/kubeadmiral/pki/front-proxy-ca.crt
            - --requestheader-extra-headers-prefix=X-Remote-Extra-
            - --requestheader-group-headers=X-Remote-Group
            - --requestheader-username-headers=X-Remote-User
            - --tls-cert-file=/etc/kubeadmiral/pki/apiserver.crt
            - --tls-private-key-file=/etc/kubeadmiral/pki/apiserver.key
          name: {{ $name }}-apiserver
          image: {{ template "kubeadmiral.apiserver.image" . }}
          imagePullPolicy: {{ .Values.apiServer.image.pullPolicy }}
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: 5443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 5443
              scheme: HTTPS
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 15
          resources:
            requests:
              cpu: 250m
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/kubeadmiral/pki
              name: kubeadmiral-certs
              readOnly: true
      {{- if .Values.apiServer.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      {{- end }}
      enableServiceLinks: true
      preemptionPolicy: PreemptLowerPriority
      priority: 2000001000
      priorityClassName: system-node-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoExecute
          operator: Exists
      volumes:
        - name: kubeadmiral-certs
          secret:
            secretName: {{ $name }}-cert-secret
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}-apiserver
  namespace: {{ include "kubeadmiral.namespace" . }}
  labels:
    app: {{ $name }}-apiserver
spec:
  type: {{ .Values.apiServer.serviceType }}
  ports:
    - name: {{ $name }}-apiserver-kubectl
      {{- if and (eq .Values.apiServer.serviceType "NodePort") (.Values.apiServer.nodePort) }}
      nodePort: {{ .Values.apiServer.nodePort }}
      {{- end }}
      port: 5443
      protocol: TCP
      targetPort: 5443
  selector:
    app: {{ $name }}-apiserver
